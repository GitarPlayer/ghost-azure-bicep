{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "5568312167615198188"
    }
  },
  "parameters": {
    "applicationNamePrefix": {
      "type": "string",
      "defaultValue": "ghost",
      "metadata": {
        "description": "Prefix to use when creating the resources in this deployment."
      }
    },
    "devAppServicePlanSku": {
      "type": "string",
      "defaultValue": "B1",
      "metadata": {
        "description": "Dev App Service Plan pricing tier for dev"
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "B1",
      "metadata": {
        "description": "Stage/Prod App Service Plan pricing tier"
      }
    },
    "devLogAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "metadata": {
        "description": "Log Analytics workspace pricing tier"
      }
    },
    "logAnalyticsWorkspaceSku": {
      "type": "string",
      "defaultValue": "PerGB2018",
      "metadata": {
        "description": "Stage/Prod Log Analytics workspace pricing tier"
      }
    },
    "devStorageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Dev Storage account pricing tier for dev"
      }
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Stage/Prod Storage account pricing tier"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location to deploy the resources"
      }
    },
    "devMySQLServerSku": {
      "type": "string",
      "defaultValue": "mySQLServerSku",
      "metadata": {
        "description": "Dev MySQL server SKU for dev"
      }
    },
    "mySQLServerSku": {
      "type": "string",
      "defaultValue": "mySQLServerSku",
      "metadata": {
        "description": "Stage/Prod MySQL server SKU"
      }
    },
    "devDatabasePassword": {
      "type": "secureString",
      "metadata": {
        "description": "Dev MySQL server password"
      }
    },
    "stageDatabasePassword": {
      "type": "secureString",
      "metadata": {
        "description": "Stage MySQL server password"
      }
    },
    "prodDatabasePassword": {
      "type": "secureString",
      "metadata": {
        "description": "Prod MySQL server password"
      }
    },
    "geoRedundantBackup": {
      "type": "string",
      "metadata": {
        "description": "Stage/Prod Whether or not geo redundant backup is enabled."
      },
      "allowedValues": [
        "Disabled",
        "Enabled"
      ]
    },
    "devGeoRedundantBackup": {
      "type": "string",
      "metadata": {
        "description": "Dev Whether or not geo redundant backup is enabled for dev"
      },
      "allowedValues": [
        "Disabled",
        "Enabled"
      ]
    },
    "highAvailabilityMode": {
      "type": "string",
      "metadata": {
        "description": "Stage/Prod High availability mode for a server."
      },
      "allowedValues": [
        "Disabled",
        "SameZone",
        "ZoneRedundant"
      ]
    },
    "devHighAvailabilityMode": {
      "type": "string",
      "metadata": {
        "description": "Dev High availability mode for a server for dev"
      },
      "allowedValues": [
        "Disabled",
        "SameZone",
        "ZoneRedundant"
      ]
    },
    "ghostContainerName": {
      "type": "string",
      "defaultValue": "gitarplayer/ghost-az-ai",
      "metadata": {
        "description": "Ghost container full image name and tag"
      }
    },
    "devGhostContainerTag": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "Ghost container full image name and tag"
      },
      "allowedValues": [
        "latest"
      ]
    },
    "stageGhostContainerTag": {
      "type": "string",
      "defaultValue": "stage",
      "metadata": {
        "description": "Ghost container full image name and tag"
      },
      "allowedValues": [
        "stage"
      ]
    },
    "prodGhostContainerTag": {
      "type": "string",
      "defaultValue": "prod",
      "metadata": {
        "description": "Ghost container full image name and tag"
      },
      "allowedValues": [
        "prod"
      ]
    },
    "containerRegistryUrl": {
      "type": "string",
      "defaultValue": "https://index.docker.io/v1",
      "metadata": {
        "description": "Container registry where the image is hosted"
      }
    },
    "devDeploymentConfiguration": {
      "type": "string",
      "defaultValue": "Web app dev",
      "allowedValues": [
        "Web app with Azure CDN",
        "Web app with Azure Front Door",
        "Web app dev"
      ]
    },
    "stageDeploymentConfiguration": {
      "type": "string",
      "defaultValue": "Web app with Azure Front Door",
      "allowedValues": [
        "Web app with Azure CDN",
        "Web app with Azure Front Door",
        "Web app dev"
      ]
    },
    "prodDeploymentConfiguration": {
      "type": "string",
      "defaultValue": "Web app with Azure Front Door",
      "allowedValues": [
        "Web app with Azure CDN",
        "Web app with Azure Front Door",
        "Web app dev"
      ]
    },
    "retentionInDays": {
      "type": "int",
      "defaultValue": 90,
      "maxValue": 730,
      "minValue": 30
    },
    "devRetentionInDays": {
      "type": "int",
      "defaultValue": 30,
      "maxValue": 90,
      "minValue": 30
    },
    "ghostApiVersion": {
      "type": "string",
      "metadata": {
        "description": "Stage/Prod The ghost API version used for the azure function"
      },
      "allowedValues": [
        "v4.0",
        "v5.0"
      ]
    },
    "devGhostApiVersion": {
      "type": "string",
      "metadata": {
        "description": "Dev The ghost API version used for the azure function for dev"
      },
      "allowedValues": [
        "v4.0",
        "v5.0"
      ]
    },
    "devPkgURL": {
      "type": "string",
      "defaultValue": "https://github.com/GitarPlayer/azure-function-ghost/archive/refs/tags/0.0.6.zip"
    },
    "stagePkgURL": {
      "type": "string",
      "defaultValue": "https://github.com/GitarPlayer/azure-function-ghost/archive/refs/tags/0.0.6.zip"
    },
    "prodPkgURL": {
      "type": "string",
      "defaultValue": "https://github.com/GitarPlayer/azure-function-ghost/archive/refs/tags/0.0.6.zip"
    }
  },
  "variables": {
    "http_prefix": "https://",
    "devPrefix": "dev",
    "stagePrefix": "stage",
    "prodPrefix": "prod",
    "devWebAppName": "[format('{0}-{1}-web-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageWebAppName": "[format('{0}-{1}-web-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodWebAppName": "[format('{0}-{1}-web-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devFunctionName": "[format('{0}-{1}-web-function-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageFunctionName": "[format('{0}-{1}-web-function-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodFunctionName": "[format('{0}-{1}-web-function-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devAppServicePlanName": "[format('{0}-{1}-asp-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageAppServicePlanName": "[format('{0}-{1}-asp-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodAppServicePlanName": "[format('{0}-{1}-asp-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devLogAnalyticsWorkspaceName": "[format('{0}-{1}-la-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageLogAnalyticsWorkspaceName": "[format('{0}-{1}-la-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodLogAnalyticsWorkspaceName": "[format('{0}-{1}-la-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devApplicationInsightsName": "[format('{0}-{1}-ai-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageApplicationInsightsName": "[format('{0}-{1}-ai-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodApplicationInsightsName": "[format('{0}-{1}-ai-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devApplicationInsightsNameFunction": "[format('{0}-{1}-ai-function-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageApplicationInsightsNameFunction": "[format('{0}-{1}-ai-function-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodApplicationInsightsNameFunction": "[format('{0}-{1}-ai-function-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devKeyVaultName": "[format('{0}-{1}-kv-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageKeyVaultName": "[format('{0}-{1}-kv-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodKeyVaultName": "[format('{0}-{1}-kv-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devStorageAccountName": "[format('{0}-{1}stor{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageStorageAccountName": "[format('{0}-{1}stor{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodStorageAccountName": "[format('{0}-{1}stor{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "devMySQLServerName": "[format('{0}-{1}-mysql-{2}', variables('devPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageMySQLServerName": "[format('{0}-{1}-mysql-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodMySQLServerName": "[format('{0}-{1}-mysql-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "databaseLogin": "ghost",
    "databaseName": "ghost",
    "devGhostContentFileShareName": "[format('{0}-contentfiles', variables('devPrefix'))]",
    "stageGhostContentFileShareName": "[format('{0}-contentfiles', variables('stagePrefix'))]",
    "prodGhostContentFileShareName": "[format('{0}-contentfiles', variables('prodPrefix'))]",
    "ghostContentFilesMountPath": "/var/lib/ghost/content_files",
    "stageSiteUrl": "[if(equals(parameters('stageDeploymentConfiguration'), 'Web app with Azure Front Door'), format('https://{0}.azurefd.net', variables('stageFrontDoorName')), format('https://{0}.azureedge.net', variables('stageCdnEndpointName')))]",
    "prodSiteUrl": "[if(equals(parameters('prodDeploymentConfiguration'), 'Web app with Azure Front Door'), format('https://{0}.azurefd.net', variables('prodFrontDoorName')), format('https://{0}.azureedge.net', variables('prodCdnEndpointName')))]",
    "stageCdnProfileName": "[format('{0}-{1}-cdnp-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodCdnProfileName": "[format('{0}-{1}-cdnp-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageCdnEndpointName": "[format('{0}-{1}-cdne-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodCdnEndpointName": "[format('{0}-{1}-cdne-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "cdnProfileSku": {
      "name": "Standard_Microsoft"
    },
    "stageFrontDoorName": "[format('{0}-{1}-fd-{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "stageWafPolicyName": "[format('{0}-{1}waf{2}', variables('stagePrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodFrontDoorName": "[format('{0}-{1}-fd-{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]",
    "prodWafPolicyName": "[format('{0}-{1}waf{2}', variables('prodPrefix'), parameters('applicationNamePrefix'), uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "devLogAnalyticsWorkspaceDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[variables('devLogAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('devLogAnalyticsWorkspaceSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "retentionInDays": {
            "value": "[parameters('devRetentionInDays')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "8116769148325475328"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "maxLength": 64,
              "minLength": 4,
              "metadata": {
                "description": "Log Analytics workspace name"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 730,
              "minValue": 30
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string",
              "allowedValues": [
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Log Analytics workspace pricing tier"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            }
          },
          "variables": {
            "solutionName": "[format('SecurityInsights({0})', parameters('logAnalyticsWorkspaceName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('logAnalyticsWorkspaceSku')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]"
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('solutionName')]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              },
              "plan": {
                "name": "[variables('solutionName')]",
                "publisher": "Microsoft",
                "product": "OMSGallery/SecurityInsights",
                "promotionCode": ""
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "stageLogAnalyticsWorkspaceDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[variables('stageLogAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "retentionInDays": {
            "value": "[parameters('retentionInDays')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "8116769148325475328"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "maxLength": 64,
              "minLength": 4,
              "metadata": {
                "description": "Log Analytics workspace name"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 730,
              "minValue": 30
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string",
              "allowedValues": [
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Log Analytics workspace pricing tier"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            }
          },
          "variables": {
            "solutionName": "[format('SecurityInsights({0})', parameters('logAnalyticsWorkspaceName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('logAnalyticsWorkspaceSku')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]"
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('solutionName')]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              },
              "plan": {
                "name": "[variables('solutionName')]",
                "publisher": "Microsoft",
                "product": "OMSGallery/SecurityInsights",
                "promotionCode": ""
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "prodLogAnalyticsWorkspaceDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsWorkspaceName": {
            "value": "[variables('prodLogAnalyticsWorkspaceName')]"
          },
          "logAnalyticsWorkspaceSku": {
            "value": "[parameters('logAnalyticsWorkspaceSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "retentionInDays": {
            "value": "[parameters('retentionInDays')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "8116769148325475328"
            }
          },
          "parameters": {
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "maxLength": 64,
              "minLength": 4,
              "metadata": {
                "description": "Log Analytics workspace name"
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "maxValue": 730,
              "minValue": 30
            },
            "logAnalyticsWorkspaceSku": {
              "type": "string",
              "allowedValues": [
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Log Analytics workspace pricing tier"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            }
          },
          "variables": {
            "solutionName": "[format('SecurityInsights({0})', parameters('logAnalyticsWorkspaceName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-06-01",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "[parameters('logAnalyticsWorkspaceSku')]"
                },
                "retentionInDays": "[parameters('retentionInDays')]"
              }
            },
            {
              "type": "Microsoft.OperationsManagement/solutions",
              "apiVersion": "2015-11-01-preview",
              "name": "[variables('solutionName')]",
              "location": "[parameters('location')]",
              "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              },
              "plan": {
                "name": "[variables('solutionName')]",
                "publisher": "Microsoft",
                "product": "OMSGallery/SecurityInsights",
                "promotionCode": ""
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}storageAccountDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('devStorageAccountName')]"
          },
          "storageAccountSku": {
            "value": "[parameters('devStorageAccountSku')]"
          },
          "fileShareFolderName": {
            "value": "[variables('devGhostContentFileShareName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "13548038485260294497"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "minLength": 3
            },
            "storageAccountSku": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS",
                "Standard_RAGRS"
              ]
            },
            "fileShareFolderName": {
              "type": "string",
              "metadata": {
                "description": "File share to store Ghost content files"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "StorageAccountDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "FileServicesDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('fileShareFolderName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "fileShareFullName": {
              "type": "string",
              "value": "[parameters('fileShareFolderName')]"
            },
            "accessKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01').keys[0].value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}storageAccountDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('stageStorageAccountName')]"
          },
          "storageAccountSku": {
            "value": "[parameters('storageAccountSku')]"
          },
          "fileShareFolderName": {
            "value": "[variables('stageGhostContentFileShareName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "13548038485260294497"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "minLength": 3
            },
            "storageAccountSku": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS",
                "Standard_RAGRS"
              ]
            },
            "fileShareFolderName": {
              "type": "string",
              "metadata": {
                "description": "File share to store Ghost content files"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "StorageAccountDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "FileServicesDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('fileShareFolderName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "fileShareFullName": {
              "type": "string",
              "value": "[parameters('fileShareFolderName')]"
            },
            "accessKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01').keys[0].value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}storageAccountDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[variables('prodStorageAccountName')]"
          },
          "storageAccountSku": {
            "value": "[parameters('storageAccountSku')]"
          },
          "fileShareFolderName": {
            "value": "[variables('prodGhostContentFileShareName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "13548038485260294497"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string",
              "maxLength": 24,
              "minLength": 3
            },
            "storageAccountSku": {
              "type": "string",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_ZRS",
                "Standard_RAGRS"
              ]
            },
            "fileShareFolderName": {
              "type": "string",
              "metadata": {
                "description": "File share to store Ghost content files"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-09-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "[parameters('storageAccountSku')]"
              },
              "properties": {
                "supportsHttpsTrafficOnly": true,
                "minimumTlsVersion": "TLS1_2"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "StorageAccountDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "FileServicesDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "StorageRead",
                    "enabled": true
                  },
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  },
                  {
                    "category": "StorageDelete",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('fileShareFolderName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "fileShareFullName": {
              "type": "string",
              "value": "[parameters('fileShareFolderName')]"
            },
            "accessKey": {
              "type": "string",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01').keys[0].value]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}keyVaultDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('devKeyVaultName')]"
          },
          "keyVaultSecretName": {
            "value": "databasePassword"
          },
          "keyVaultSecretValue": {
            "value": "[parameters('devDatabasePassword')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "servicePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))).outputs.principalId.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "6140068581669923610"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "maxLength": 24,
              "minLength": 3,
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "keyVaultSecretName": {
              "type": "string",
              "maxLength": 127,
              "minLength": 1,
              "metadata": {
                "description": "Secret name to store"
              }
            },
            "keyVaultSecretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Secret value to store"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "servicePrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Service principal ID to provide access to the vault secrets"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[parameters('servicePrincipalId')]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ],
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyVaultSecretName'))]",
              "properties": {
                "value": "[parameters('keyVaultSecretValue')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "KeyVaultDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "databasePasswordSecretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('keyVaultSecretName'))).secretUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}KeyVaultDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('stageKeyVaultName')]"
          },
          "keyVaultSecretName": {
            "value": "databasePassword"
          },
          "keyVaultSecretValue": {
            "value": "[parameters('stageDatabasePassword')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "servicePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.principalId.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "6140068581669923610"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "maxLength": 24,
              "minLength": 3,
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "keyVaultSecretName": {
              "type": "string",
              "maxLength": 127,
              "minLength": 1,
              "metadata": {
                "description": "Secret name to store"
              }
            },
            "keyVaultSecretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Secret value to store"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "servicePrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Service principal ID to provide access to the vault secrets"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[parameters('servicePrincipalId')]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ],
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyVaultSecretName'))]",
              "properties": {
                "value": "[parameters('keyVaultSecretValue')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "KeyVaultDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "databasePasswordSecretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('keyVaultSecretName'))).secretUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}KeyVaultDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[variables('prodKeyVaultName')]"
          },
          "keyVaultSecretName": {
            "value": "databasePassword"
          },
          "keyVaultSecretValue": {
            "value": "[parameters('prodDatabasePassword')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "servicePrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.principalId.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "6140068581669923610"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "maxLength": 24,
              "minLength": 3,
              "metadata": {
                "description": "Key Vault name"
              }
            },
            "keyVaultSecretName": {
              "type": "string",
              "maxLength": 127,
              "minLength": 1,
              "metadata": {
                "description": "Secret name to store"
              }
            },
            "keyVaultSecretValue": {
              "type": "secureString",
              "metadata": {
                "description": "Secret value to store"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "servicePrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Service principal ID to provide access to the vault secrets"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2021-04-01-preview",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[parameters('servicePrincipalId')]",
                    "permissions": {
                      "secrets": [
                        "get"
                      ]
                    }
                  }
                ],
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('keyVaultSecretName'))]",
              "properties": {
                "value": "[parameters('keyVaultSecretValue')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "KeyVaultDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AuditEvent",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "databasePasswordSecretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('keyVaultSecretName'))).secretUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}webAppDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[variables('devWebAppName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('devPrefix')))).outputs.id.value]"
          },
          "ghostContainerImage": {
            "value": "[parameters('ghostContainerName')]"
          },
          "ghostContainerTag": {
            "value": "[parameters('devGhostContainerTag')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('devPrefix')))).outputs.name.value]"
          },
          "storageAccountAccessKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('devPrefix')))).outputs.accessKey.value]"
          },
          "fileShareName": {
            "value": "[variables('devGhostContentFileShareName')]"
          },
          "containerMountPath": {
            "value": "[variables('ghostContentFilesMountPath')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "deploymentConfiguration": {
            "value": "[parameters('devDeploymentConfiguration')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "672129672970640021"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string",
              "maxLength": 60,
              "minLength": 2
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan id to host the app"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "ghostContainerImage": {
              "type": "string",
              "metadata": {
                "description": "Ghost container full image name"
              }
            },
            "ghostContainerTag": {
              "type": "string",
              "metadata": {
                "description": "Ghost container tag"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account name to store Ghost content files"
              }
            },
            "storageAccountAccessKey": {
              "type": "secureString"
            },
            "fileShareName": {
              "type": "string",
              "metadata": {
                "description": "File share name on the storage account to store Ghost content files"
              }
            },
            "containerMountPath": {
              "type": "string",
              "metadata": {
                "description": "Path to mount the file share in the container"
              }
            },
            "deploymentConfiguration": {
              "type": "string",
              "allowedValues": [
                "Web app with Azure CDN",
                "Web app with Azure Front Door",
                "Web app dev"
              ]
            }
          },
          "variables": {
            "containerImageReference": "[format('DOCKER|{0}:{1}', parameters('ghostContainerImage'), parameters('ghostContainerTag'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-01-15",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux,container",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "clientAffinityEnabled": false,
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "enabled": true,
                "reserved": true,
                "siteConfig": {
                  "http20Enabled": true,
                  "httpLoggingEnabled": true,
                  "minTlsVersion": "1.2",
                  "ftpsState": "Disabled",
                  "linuxFxVersion": "[variables('containerImageReference')]",
                  "alwaysOn": true,
                  "use32BitWorkerProcess": false,
                  "azureStorageAccounts": {
                    "ContentFilesVolume": {
                      "type": "AzureFiles",
                      "accountName": "[parameters('storageAccountName')]",
                      "shareName": "[parameters('fileShareName')]",
                      "mountPath": "[parameters('containerMountPath')]",
                      "accessKey": "[parameters('storageAccountAccessKey')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('deploymentConfiguration'), 'Web app with Azure Front Door')]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'web')]",
              "properties": {
                "ipSecurityRestrictions": [
                  {
                    "ipAddress": "AzureFrontDoor.Backend",
                    "action": "Allow",
                    "tag": "ServiceTag",
                    "priority": 300,
                    "name": "Access from Azure Front Door",
                    "description": "Rule for access from Azure Front Door"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('webAppName'))]",
              "name": "WebAppDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AppServiceHTTPLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceConsoleLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceAppLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceAuditLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceIPSecAuditLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServicePlatformLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "hostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName'))).hostNames[0]]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2021-01-15', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('devPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('devPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}WebAppDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[variables('stageWebAppName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('stagePrefix')))).outputs.id.value]"
          },
          "ghostContainerImage": {
            "value": "[parameters('ghostContainerName')]"
          },
          "ghostContainerTag": {
            "value": "[parameters('stageGhostContainerTag')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('stagePrefix')))).outputs.name.value]"
          },
          "storageAccountAccessKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('stagePrefix')))).outputs.accessKey.value]"
          },
          "fileShareName": {
            "value": "[variables('stageGhostContentFileShareName')]"
          },
          "containerMountPath": {
            "value": "[variables('ghostContentFilesMountPath')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "deploymentConfiguration": {
            "value": "[parameters('stageDeploymentConfiguration')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "672129672970640021"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string",
              "maxLength": 60,
              "minLength": 2
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan id to host the app"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "ghostContainerImage": {
              "type": "string",
              "metadata": {
                "description": "Ghost container full image name"
              }
            },
            "ghostContainerTag": {
              "type": "string",
              "metadata": {
                "description": "Ghost container tag"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account name to store Ghost content files"
              }
            },
            "storageAccountAccessKey": {
              "type": "secureString"
            },
            "fileShareName": {
              "type": "string",
              "metadata": {
                "description": "File share name on the storage account to store Ghost content files"
              }
            },
            "containerMountPath": {
              "type": "string",
              "metadata": {
                "description": "Path to mount the file share in the container"
              }
            },
            "deploymentConfiguration": {
              "type": "string",
              "allowedValues": [
                "Web app with Azure CDN",
                "Web app with Azure Front Door",
                "Web app dev"
              ]
            }
          },
          "variables": {
            "containerImageReference": "[format('DOCKER|{0}:{1}', parameters('ghostContainerImage'), parameters('ghostContainerTag'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-01-15",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux,container",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "clientAffinityEnabled": false,
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "enabled": true,
                "reserved": true,
                "siteConfig": {
                  "http20Enabled": true,
                  "httpLoggingEnabled": true,
                  "minTlsVersion": "1.2",
                  "ftpsState": "Disabled",
                  "linuxFxVersion": "[variables('containerImageReference')]",
                  "alwaysOn": true,
                  "use32BitWorkerProcess": false,
                  "azureStorageAccounts": {
                    "ContentFilesVolume": {
                      "type": "AzureFiles",
                      "accountName": "[parameters('storageAccountName')]",
                      "shareName": "[parameters('fileShareName')]",
                      "mountPath": "[parameters('containerMountPath')]",
                      "accessKey": "[parameters('storageAccountAccessKey')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('deploymentConfiguration'), 'Web app with Azure Front Door')]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'web')]",
              "properties": {
                "ipSecurityRestrictions": [
                  {
                    "ipAddress": "AzureFrontDoor.Backend",
                    "action": "Allow",
                    "tag": "ServiceTag",
                    "priority": 300,
                    "name": "Access from Azure Front Door",
                    "description": "Rule for access from Azure Front Door"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('webAppName'))]",
              "name": "WebAppDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AppServiceHTTPLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceConsoleLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceAppLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceAuditLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceIPSecAuditLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServicePlatformLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "hostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName'))).hostNames[0]]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2021-01-15', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('stagePrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('stagePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}WebAppDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[variables('prodWebAppName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('prodPrefix')))).outputs.id.value]"
          },
          "ghostContainerImage": {
            "value": "[parameters('ghostContainerName')]"
          },
          "ghostContainerTag": {
            "value": "[parameters('prodGhostContainerTag')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('prodPrefix')))).outputs.name.value]"
          },
          "storageAccountAccessKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('prodPrefix')))).outputs.accessKey.value]"
          },
          "fileShareName": {
            "value": "[variables('prodGhostContentFileShareName')]"
          },
          "containerMountPath": {
            "value": "[variables('ghostContentFilesMountPath')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "deploymentConfiguration": {
            "value": "[parameters('prodDeploymentConfiguration')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "672129672970640021"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string",
              "maxLength": 60,
              "minLength": 2
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan id to host the app"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "ghostContainerImage": {
              "type": "string",
              "metadata": {
                "description": "Ghost container full image name"
              }
            },
            "ghostContainerTag": {
              "type": "string",
              "metadata": {
                "description": "Ghost container tag"
              }
            },
            "storageAccountName": {
              "type": "string",
              "metadata": {
                "description": "Storage account name to store Ghost content files"
              }
            },
            "storageAccountAccessKey": {
              "type": "secureString"
            },
            "fileShareName": {
              "type": "string",
              "metadata": {
                "description": "File share name on the storage account to store Ghost content files"
              }
            },
            "containerMountPath": {
              "type": "string",
              "metadata": {
                "description": "Path to mount the file share in the container"
              }
            },
            "deploymentConfiguration": {
              "type": "string",
              "allowedValues": [
                "Web app with Azure CDN",
                "Web app with Azure Front Door",
                "Web app dev"
              ]
            }
          },
          "variables": {
            "containerImageReference": "[format('DOCKER|{0}:{1}', parameters('ghostContainerImage'), parameters('ghostContainerTag'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-01-15",
              "name": "[parameters('webAppName')]",
              "location": "[parameters('location')]",
              "kind": "app,linux,container",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "clientAffinityEnabled": false,
                "serverFarmId": "[parameters('appServicePlanId')]",
                "httpsOnly": true,
                "enabled": true,
                "reserved": true,
                "siteConfig": {
                  "http20Enabled": true,
                  "httpLoggingEnabled": true,
                  "minTlsVersion": "1.2",
                  "ftpsState": "Disabled",
                  "linuxFxVersion": "[variables('containerImageReference')]",
                  "alwaysOn": true,
                  "use32BitWorkerProcess": false,
                  "azureStorageAccounts": {
                    "ContentFilesVolume": {
                      "type": "AzureFiles",
                      "accountName": "[parameters('storageAccountName')]",
                      "shareName": "[parameters('fileShareName')]",
                      "mountPath": "[parameters('containerMountPath')]",
                      "accessKey": "[parameters('storageAccountAccessKey')]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[equals(parameters('deploymentConfiguration'), 'Web app with Azure Front Door')]",
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'web')]",
              "properties": {
                "ipSecurityRestrictions": [
                  {
                    "ipAddress": "AzureFrontDoor.Backend",
                    "action": "Allow",
                    "tag": "ServiceTag",
                    "priority": 300,
                    "name": "Access from Azure Front Door",
                    "description": "Rule for access from Azure Front Door"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('webAppName'))]",
              "name": "WebAppDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AppServiceHTTPLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceConsoleLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceAppLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceAuditLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServiceIPSecAuditLogs",
                    "enabled": true
                  },
                  {
                    "category": "AppServicePlatformLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('webAppName')]"
            },
            "hostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName'))).hostNames[0]]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2021-01-15', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('prodPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('prodPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}functionDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "pkgURL": {
            "value": "[parameters('devPkgURL')]"
          },
          "functionName": {
            "value": "[variables('devFunctionName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('devPrefix')))).outputs.id.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "applicationInsightsNameFunction": {
            "value": "[variables('devApplicationInsightsNameFunction')]"
          },
          "ghostApiVersion": {
            "value": "[parameters('devGhostApiVersion')]"
          },
          "ghostURL": {
            "value": "http://test"
          },
          "storageAccountAccessKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('devPrefix')))).outputs.accessKey.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('devPrefix')))).outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "7953747781620510719"
            }
          },
          "parameters": {
            "ghostApiVersion": {
              "type": "string",
              "allowedValues": [
                "v4.0",
                "v5.0"
              ]
            },
            "ghostURL": {
              "type": "string"
            },
            "functionName": {
              "type": "string",
              "maxLength": 60,
              "minLength": 2
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan id to host the app"
              }
            },
            "applicationInsightsNameFunction": {
              "type": "string",
              "metadata": {
                "description": "Name of Application Insights resource."
              }
            },
            "pkgURL": {
              "type": "string"
            },
            "storageAccountAccessKey": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[parameters('functionName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "GHOST_URL",
                      "value": "[parameters('ghostURL')]"
                    },
                    {
                      "name": "GHOST_API_VERSION",
                      "value": "[parameters('ghostApiVersion')]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, parameters('storageAccountAccessKey'))]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsNameFunction'))).InstrumentationKey]"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "[parameters('pkgURL')]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "~16"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "node"
                    }
                  ],
                  "linuxFxVersion": "Node|16",
                  "minTlsVersion": "1.2",
                  "alwaysOn": true,
                  "http20Enabled": false
                },
                "redundancyMode": "None",
                "storageAccountRequired": false,
                "keyVaultReferenceIdentity": "SystemAssigned",
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsNameFunction'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsNameFunction')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('devPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('devPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}functionDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "pkgURL": {
            "value": "[parameters('stagePkgURL')]"
          },
          "functionName": {
            "value": "[variables('stageFunctionName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('stagePrefix')))).outputs.id.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "applicationInsightsNameFunction": {
            "value": "[variables('stageApplicationInsightsNameFunction')]"
          },
          "ghostApiVersion": {
            "value": "[parameters('ghostApiVersion')]"
          },
          "ghostURL": {
            "value": "[format('{0}{1}', variables('http_prefix'), reference(resourceId('Microsoft.Resources/deployments', 'stageFrontDoorDeploy'), '2020-10-01').outputs.frontendEndpointHostName.value)]"
          },
          "storageAccountAccessKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('stagePrefix')))).outputs.accessKey.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('stagePrefix')))).outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "7953747781620510719"
            }
          },
          "parameters": {
            "ghostApiVersion": {
              "type": "string",
              "allowedValues": [
                "v4.0",
                "v5.0"
              ]
            },
            "ghostURL": {
              "type": "string"
            },
            "functionName": {
              "type": "string",
              "maxLength": 60,
              "minLength": 2
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan id to host the app"
              }
            },
            "applicationInsightsNameFunction": {
              "type": "string",
              "metadata": {
                "description": "Name of Application Insights resource."
              }
            },
            "pkgURL": {
              "type": "string"
            },
            "storageAccountAccessKey": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[parameters('functionName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "GHOST_URL",
                      "value": "[parameters('ghostURL')]"
                    },
                    {
                      "name": "GHOST_API_VERSION",
                      "value": "[parameters('ghostApiVersion')]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, parameters('storageAccountAccessKey'))]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsNameFunction'))).InstrumentationKey]"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "[parameters('pkgURL')]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "~16"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "node"
                    }
                  ],
                  "linuxFxVersion": "Node|16",
                  "minTlsVersion": "1.2",
                  "alwaysOn": true,
                  "http20Enabled": false
                },
                "redundancyMode": "None",
                "storageAccountRequired": false,
                "keyVaultReferenceIdentity": "SystemAssigned",
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsNameFunction'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsNameFunction')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('stagePrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'stageFrontDoorDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('stagePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}functionDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "pkgURL": {
            "value": "[parameters('prodPkgURL')]"
          },
          "functionName": {
            "value": "[variables('prodFunctionName')]"
          },
          "appServicePlanId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('prodPrefix')))).outputs.id.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "applicationInsightsNameFunction": {
            "value": "[variables('prodApplicationInsightsNameFunction')]"
          },
          "ghostApiVersion": {
            "value": "[parameters('ghostApiVersion')]"
          },
          "ghostURL": {
            "value": "[format('{0}{1}', variables('http_prefix'), reference(resourceId('Microsoft.Resources/deployments', 'prodFrontDoorDeploy'), '2020-10-01').outputs.frontendEndpointHostName.value)]"
          },
          "storageAccountAccessKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('prodPrefix')))).outputs.accessKey.value]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('prodPrefix')))).outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "7953747781620510719"
            }
          },
          "parameters": {
            "ghostApiVersion": {
              "type": "string",
              "allowedValues": [
                "v4.0",
                "v5.0"
              ]
            },
            "ghostURL": {
              "type": "string"
            },
            "functionName": {
              "type": "string",
              "maxLength": 60,
              "minLength": 2
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "App Service Plan id to host the app"
              }
            },
            "applicationInsightsNameFunction": {
              "type": "string",
              "metadata": {
                "description": "Name of Application Insights resource."
              }
            },
            "pkgURL": {
              "type": "string"
            },
            "storageAccountAccessKey": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-03-01",
              "name": "[parameters('functionName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "GHOST_URL",
                      "value": "[parameters('ghostURL')]"
                    },
                    {
                      "name": "GHOST_API_VERSION",
                      "value": "[parameters('ghostApiVersion')]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, parameters('storageAccountAccessKey'))]"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsNameFunction'))).InstrumentationKey]"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "[parameters('pkgURL')]"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_NODE_DEFAULT_VERSION",
                      "value": "~16"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "node"
                    }
                  ],
                  "linuxFxVersion": "Node|16",
                  "minTlsVersion": "1.2",
                  "alwaysOn": true,
                  "http20Enabled": false
                },
                "redundancyMode": "None",
                "storageAccountRequired": false,
                "keyVaultReferenceIdentity": "SystemAssigned",
                "httpsOnly": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsNameFunction'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsNameFunction')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "Request_Source": "rest"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}appServicePlanDeploy', variables('prodPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'prodFrontDoorDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}storageAccountDeploy', variables('prodPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}WebAppSettingsDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))).outputs.name.value]"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('devPrefix')))).outputs.ConnectionString.value]"
          },
          "applicationInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('devPrefix')))).outputs.InstrumentationKey.value]"
          },
          "containerRegistryUrl": {
            "value": "[parameters('containerRegistryUrl')]"
          },
          "containerMountPath": {
            "value": "[variables('ghostContentFilesMountPath')]"
          },
          "databaseHostFQDN": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}MySQLServerDeploy', variables('devPrefix')))).outputs.fullyQualifiedDomainName.value]"
          },
          "databaseLogin": {
            "value": "[variables('databaseLogin')]"
          },
          "databasePasswordSecretUri": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}keyVaultDeploy', variables('devPrefix')))).outputs.databasePasswordSecretUri.value]"
          },
          "databaseName": {
            "value": "[variables('databaseName')]"
          },
          "siteUrl": {
            "value": "devSiteUrl"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10339588684898493979"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string"
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "databaseHostFQDN": {
              "type": "string",
              "metadata": {
                "description": "MySQL server hostname"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Ghost datbase name"
              }
            },
            "databaseLogin": {
              "type": "string",
              "metadata": {
                "description": "Ghost database user name"
              }
            },
            "databasePasswordSecretUri": {
              "type": "string",
              "metadata": {
                "description": "Ghost database user password"
              }
            },
            "siteUrl": {
              "type": "string",
              "metadata": {
                "description": "Website URL to autogenerate links by Ghost"
              }
            },
            "containerMountPath": {
              "type": "string",
              "metadata": {
                "description": "Mount path for Ghost content files"
              }
            },
            "containerRegistryUrl": {
              "type": "string",
              "metadata": {
                "description": "Container registry to pull Ghost docker image"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'appsettings')]",
              "properties": {
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[parameters('applicationInsightsInstrumentationKey')]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[parameters('applicationInsightsConnectionString')]",
                "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
                "XDT_MicrosoftApplicationInsights_Mode": "default",
                "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
                "DOCKER_REGISTRY_SERVER_URL": "[parameters('containerRegistryUrl')]",
                "NODE_ENV": "production",
                "GHOST_CONTENT": "[parameters('containerMountPath')]",
                "paths__contentPath": "[parameters('containerMountPath')]",
                "privacy_useUpdateCheck": "false",
                "url": "[parameters('siteUrl')]",
                "database__client": "mysql",
                "database__connection__host": "[parameters('databaseHostFQDN')]",
                "database__connection__user": "[parameters('databaseLogin')]",
                "database__connection__password": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('databasePasswordSecretUri'))]",
                "database__connection__database": "[parameters('databaseName')]",
                "database__connection__ssl": "true",
                "database__connection__ssl_minVersion": "TLSv1.2"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('devPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}keyVaultDeploy', variables('devPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}MySQLServerDeploy', variables('devPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "stagewebAppSettingsDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.name.value]"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('stagePrefix')))).outputs.ConnectionString.value]"
          },
          "applicationInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('stagePrefix')))).outputs.InstrumentationKey.value]"
          },
          "containerRegistryUrl": {
            "value": "[parameters('containerRegistryUrl')]"
          },
          "containerMountPath": {
            "value": "[variables('ghostContentFilesMountPath')]"
          },
          "databaseHostFQDN": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}MySQLServerDeploy', variables('stagePrefix')))).outputs.fullyQualifiedDomainName.value]"
          },
          "databaseLogin": {
            "value": "[variables('databaseLogin')]"
          },
          "databasePasswordSecretUri": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}KeyVaultDeploy', variables('stagePrefix')))).outputs.databasePasswordSecretUri.value]"
          },
          "databaseName": {
            "value": "[variables('databaseName')]"
          },
          "siteUrl": {
            "value": "[variables('stageSiteUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10339588684898493979"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string"
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "databaseHostFQDN": {
              "type": "string",
              "metadata": {
                "description": "MySQL server hostname"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Ghost datbase name"
              }
            },
            "databaseLogin": {
              "type": "string",
              "metadata": {
                "description": "Ghost database user name"
              }
            },
            "databasePasswordSecretUri": {
              "type": "string",
              "metadata": {
                "description": "Ghost database user password"
              }
            },
            "siteUrl": {
              "type": "string",
              "metadata": {
                "description": "Website URL to autogenerate links by Ghost"
              }
            },
            "containerMountPath": {
              "type": "string",
              "metadata": {
                "description": "Mount path for Ghost content files"
              }
            },
            "containerRegistryUrl": {
              "type": "string",
              "metadata": {
                "description": "Container registry to pull Ghost docker image"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'appsettings')]",
              "properties": {
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[parameters('applicationInsightsInstrumentationKey')]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[parameters('applicationInsightsConnectionString')]",
                "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
                "XDT_MicrosoftApplicationInsights_Mode": "default",
                "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
                "DOCKER_REGISTRY_SERVER_URL": "[parameters('containerRegistryUrl')]",
                "NODE_ENV": "production",
                "GHOST_CONTENT": "[parameters('containerMountPath')]",
                "paths__contentPath": "[parameters('containerMountPath')]",
                "privacy_useUpdateCheck": "false",
                "url": "[parameters('siteUrl')]",
                "database__client": "mysql",
                "database__connection__host": "[parameters('databaseHostFQDN')]",
                "database__connection__user": "[parameters('databaseLogin')]",
                "database__connection__password": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('databasePasswordSecretUri'))]",
                "database__connection__database": "[parameters('databaseName')]",
                "database__connection__ssl": "true",
                "database__connection__ssl_minVersion": "TLSv1.2"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('stagePrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}KeyVaultDeploy', variables('stagePrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}MySQLServerDeploy', variables('stagePrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "prodwebAppSettingsDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "webAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.name.value]"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('prodPrefix')))).outputs.ConnectionString.value]"
          },
          "applicationInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('prodPrefix')))).outputs.InstrumentationKey.value]"
          },
          "containerRegistryUrl": {
            "value": "[parameters('containerRegistryUrl')]"
          },
          "containerMountPath": {
            "value": "[variables('ghostContentFilesMountPath')]"
          },
          "databaseHostFQDN": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}MySQLServerDeploy', variables('prodPrefix')))).outputs.fullyQualifiedDomainName.value]"
          },
          "databaseLogin": {
            "value": "[variables('databaseLogin')]"
          },
          "databasePasswordSecretUri": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}KeyVaultDeploy', variables('prodPrefix')))).outputs.databasePasswordSecretUri.value]"
          },
          "databaseName": {
            "value": "[variables('databaseName')]"
          },
          "siteUrl": {
            "value": "[variables('prodSiteUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10339588684898493979"
            }
          },
          "parameters": {
            "webAppName": {
              "type": "string"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string"
            },
            "applicationInsightsConnectionString": {
              "type": "string"
            },
            "databaseHostFQDN": {
              "type": "string",
              "metadata": {
                "description": "MySQL server hostname"
              }
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Ghost datbase name"
              }
            },
            "databaseLogin": {
              "type": "string",
              "metadata": {
                "description": "Ghost database user name"
              }
            },
            "databasePasswordSecretUri": {
              "type": "string",
              "metadata": {
                "description": "Ghost database user password"
              }
            },
            "siteUrl": {
              "type": "string",
              "metadata": {
                "description": "Website URL to autogenerate links by Ghost"
              }
            },
            "containerMountPath": {
              "type": "string",
              "metadata": {
                "description": "Mount path for Ghost content files"
              }
            },
            "containerRegistryUrl": {
              "type": "string",
              "metadata": {
                "description": "Container registry to pull Ghost docker image"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/sites/config",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/{1}', parameters('webAppName'), 'appsettings')]",
              "properties": {
                "APPINSIGHTS_INSTRUMENTATIONKEY": "[parameters('applicationInsightsInstrumentationKey')]",
                "APPLICATIONINSIGHTS_CONNECTION_STRING": "[parameters('applicationInsightsConnectionString')]",
                "ApplicationInsightsAgent_EXTENSION_VERSION": "~2",
                "XDT_MicrosoftApplicationInsights_Mode": "default",
                "WEBSITES_ENABLE_APP_SERVICE_STORAGE": "false",
                "DOCKER_REGISTRY_SERVER_URL": "[parameters('containerRegistryUrl')]",
                "NODE_ENV": "production",
                "GHOST_CONTENT": "[parameters('containerMountPath')]",
                "paths__contentPath": "[parameters('containerMountPath')]",
                "privacy_useUpdateCheck": "false",
                "url": "[parameters('siteUrl')]",
                "database__client": "mysql",
                "database__connection__host": "[parameters('databaseHostFQDN')]",
                "database__connection__user": "[parameters('databaseLogin')]",
                "database__connection__password": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('databasePasswordSecretUri'))]",
                "database__connection__database": "[parameters('databaseName')]",
                "database__connection__ssl": "true",
                "database__connection__ssl_minVersion": "TLSv1.2"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}ApplicationInsightsDeploy', variables('prodPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}KeyVaultDeploy', variables('prodPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}MySQLServerDeploy', variables('prodPrefix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}appServicePlanDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('devAppServicePlanName')]"
          },
          "appServicePlanSku": {
            "value": "[parameters('devAppServicePlanSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10424369763500609191"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string",
              "maxLength": 40,
              "minLength": 1,
              "metadata": {
                "description": "App Service Plan name"
              }
            },
            "appServicePlanSku": {
              "type": "string",
              "allowedValues": [
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1v2",
                "P2v2",
                "P3v2"
              ],
              "metadata": {
                "description": "App Service Plan pricing tier"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "linux",
              "properties": {
                "reserved": true,
                "zoneRedundant": true
              },
              "sku": {
                "name": "[parameters('appServicePlanSku')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('appServicePlanName'))]",
              "name": "AppServicePlanDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2021-05-01-preview",
              "name": "ghost-asp-z6uebgtm2gle6-Autoscale-780",
              "location": "West Europe",
              "properties": {
                "profiles": [
                  {
                    "name": "Auto created scale condition",
                    "capacity": {
                      "minimum": "1",
                      "maximum": "10",
                      "default": "3"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "microsoft.web/serverfarms",
                          "metricResourceUri": "/subscriptions/2221643b-928c-42a5-a96d-b56de5a8d6d8/resourceGroups/withouthAnd/providers/Microsoft.Web/serverFarms/ghost-asp-z6uebgtm2gle6",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": "70.0",
                          "dimensions": [
                            {
                              "DimensionName": "Instance",
                              "Operator": "Equals",
                              "Values": [
                                "pl0ldlwk0001X5"
                              ]
                            }
                          ],
                          "dividePerInstance": false
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "3",
                          "cooldown": "PT5M"
                        }
                      }
                    ]
                  }
                ],
                "enabled": true,
                "name": "ghost-asp-z6uebgtm2gle6-Autoscale-780",
                "targetResourceUri": "/subscriptions/2221643b-928c-42a5-a96d-b56de5a8d6d8/resourceGroups/withouthAnd/providers/Microsoft.Web/serverfarms/ghost-asp-z6uebgtm2gle6",
                "notifications": [],
                "predictiveAutoscalePolicy": {
                  "scaleMode": "Disabled"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}appServicePlanDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('stageAppServicePlanName')]"
          },
          "appServicePlanSku": {
            "value": "[parameters('appServicePlanSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10424369763500609191"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string",
              "maxLength": 40,
              "minLength": 1,
              "metadata": {
                "description": "App Service Plan name"
              }
            },
            "appServicePlanSku": {
              "type": "string",
              "allowedValues": [
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1v2",
                "P2v2",
                "P3v2"
              ],
              "metadata": {
                "description": "App Service Plan pricing tier"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "linux",
              "properties": {
                "reserved": true,
                "zoneRedundant": true
              },
              "sku": {
                "name": "[parameters('appServicePlanSku')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('appServicePlanName'))]",
              "name": "AppServicePlanDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2021-05-01-preview",
              "name": "ghost-asp-z6uebgtm2gle6-Autoscale-780",
              "location": "West Europe",
              "properties": {
                "profiles": [
                  {
                    "name": "Auto created scale condition",
                    "capacity": {
                      "minimum": "1",
                      "maximum": "10",
                      "default": "3"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "microsoft.web/serverfarms",
                          "metricResourceUri": "/subscriptions/2221643b-928c-42a5-a96d-b56de5a8d6d8/resourceGroups/withouthAnd/providers/Microsoft.Web/serverFarms/ghost-asp-z6uebgtm2gle6",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": "70.0",
                          "dimensions": [
                            {
                              "DimensionName": "Instance",
                              "Operator": "Equals",
                              "Values": [
                                "pl0ldlwk0001X5"
                              ]
                            }
                          ],
                          "dividePerInstance": false
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "3",
                          "cooldown": "PT5M"
                        }
                      }
                    ]
                  }
                ],
                "enabled": true,
                "name": "ghost-asp-z6uebgtm2gle6-Autoscale-780",
                "targetResourceUri": "/subscriptions/2221643b-928c-42a5-a96d-b56de5a8d6d8/resourceGroups/withouthAnd/providers/Microsoft.Web/serverfarms/ghost-asp-z6uebgtm2gle6",
                "notifications": [],
                "predictiveAutoscalePolicy": {
                  "scaleMode": "Disabled"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}appServicePlanDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('prodAppServicePlanName')]"
          },
          "appServicePlanSku": {
            "value": "[parameters('appServicePlanSku')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10424369763500609191"
            }
          },
          "parameters": {
            "appServicePlanName": {
              "type": "string",
              "maxLength": 40,
              "minLength": 1,
              "metadata": {
                "description": "App Service Plan name"
              }
            },
            "appServicePlanSku": {
              "type": "string",
              "allowedValues": [
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1v2",
                "P2v2",
                "P3v2"
              ],
              "metadata": {
                "description": "App Service Plan pricing tier"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-03-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "kind": "linux",
              "properties": {
                "reserved": true,
                "zoneRedundant": true
              },
              "sku": {
                "name": "[parameters('appServicePlanSku')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('appServicePlanName'))]",
              "name": "AppServicePlanDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2021-05-01-preview",
              "name": "ghost-asp-z6uebgtm2gle6-Autoscale-780",
              "location": "West Europe",
              "properties": {
                "profiles": [
                  {
                    "name": "Auto created scale condition",
                    "capacity": {
                      "minimum": "1",
                      "maximum": "10",
                      "default": "3"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricNamespace": "microsoft.web/serverfarms",
                          "metricResourceUri": "/subscriptions/2221643b-928c-42a5-a96d-b56de5a8d6d8/resourceGroups/withouthAnd/providers/Microsoft.Web/serverFarms/ghost-asp-z6uebgtm2gle6",
                          "timeGrain": "PT1M",
                          "statistic": "Average",
                          "timeWindow": "PT5M",
                          "timeAggregation": "Average",
                          "operator": "GreaterThan",
                          "threshold": "70.0",
                          "dimensions": [
                            {
                              "DimensionName": "Instance",
                              "Operator": "Equals",
                              "Values": [
                                "pl0ldlwk0001X5"
                              ]
                            }
                          ],
                          "dividePerInstance": false
                        },
                        "scaleAction": {
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "3",
                          "cooldown": "PT5M"
                        }
                      }
                    ]
                  }
                ],
                "enabled": true,
                "name": "ghost-asp-z6uebgtm2gle6-Autoscale-780",
                "targetResourceUri": "/subscriptions/2221643b-928c-42a5-a96d-b56de5a8d6d8/resourceGroups/withouthAnd/providers/Microsoft.Web/serverfarms/ghost-asp-z6uebgtm2gle6",
                "notifications": [],
                "predictiveAutoscalePolicy": {
                  "scaleMode": "Disabled"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}ApplicationInsightsDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[variables('devApplicationInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "4747354879594847658"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string",
              "maxLength": 260,
              "minLength": 1,
              "metadata": {
                "description": "Application Insights name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('applicationInsightsName'))]",
              "name": "InsightsDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AppAvailabilityResults",
                    "enabled": true
                  },
                  {
                    "category": "AppBrowserTimings",
                    "enabled": true
                  },
                  {
                    "category": "AppEvents",
                    "enabled": true
                  },
                  {
                    "category": "AppMetrics",
                    "enabled": true
                  },
                  {
                    "category": "AppDependencies",
                    "enabled": true
                  },
                  {
                    "category": "AppExceptions",
                    "enabled": true
                  },
                  {
                    "category": "AppPageViews",
                    "enabled": true
                  },
                  {
                    "category": "AppPerformanceCounters",
                    "enabled": true
                  },
                  {
                    "category": "AppRequests",
                    "enabled": true
                  },
                  {
                    "category": "AppSystemEvents",
                    "enabled": true
                  },
                  {
                    "category": "AppTraces",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
              ]
            }
          ],
          "outputs": {
            "InstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).InstrumentationKey]"
            },
            "ConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}ApplicationInsightsDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[variables('stageApplicationInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "4747354879594847658"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string",
              "maxLength": 260,
              "minLength": 1,
              "metadata": {
                "description": "Application Insights name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('applicationInsightsName'))]",
              "name": "InsightsDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AppAvailabilityResults",
                    "enabled": true
                  },
                  {
                    "category": "AppBrowserTimings",
                    "enabled": true
                  },
                  {
                    "category": "AppEvents",
                    "enabled": true
                  },
                  {
                    "category": "AppMetrics",
                    "enabled": true
                  },
                  {
                    "category": "AppDependencies",
                    "enabled": true
                  },
                  {
                    "category": "AppExceptions",
                    "enabled": true
                  },
                  {
                    "category": "AppPageViews",
                    "enabled": true
                  },
                  {
                    "category": "AppPerformanceCounters",
                    "enabled": true
                  },
                  {
                    "category": "AppRequests",
                    "enabled": true
                  },
                  {
                    "category": "AppSystemEvents",
                    "enabled": true
                  },
                  {
                    "category": "AppTraces",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
              ]
            }
          ],
          "outputs": {
            "InstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).InstrumentationKey]"
            },
            "ConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}ApplicationInsightsDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[variables('prodApplicationInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "4747354879594847658"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string",
              "maxLength": 260,
              "minLength": 1,
              "metadata": {
                "description": "Application Insights name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('applicationInsightsName'))]",
              "name": "InsightsDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AppAvailabilityResults",
                    "enabled": true
                  },
                  {
                    "category": "AppBrowserTimings",
                    "enabled": true
                  },
                  {
                    "category": "AppEvents",
                    "enabled": true
                  },
                  {
                    "category": "AppMetrics",
                    "enabled": true
                  },
                  {
                    "category": "AppDependencies",
                    "enabled": true
                  },
                  {
                    "category": "AppExceptions",
                    "enabled": true
                  },
                  {
                    "category": "AppPageViews",
                    "enabled": true
                  },
                  {
                    "category": "AppPerformanceCounters",
                    "enabled": true
                  },
                  {
                    "category": "AppRequests",
                    "enabled": true
                  },
                  {
                    "category": "AppSystemEvents",
                    "enabled": true
                  },
                  {
                    "category": "AppTraces",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
              ]
            }
          ],
          "outputs": {
            "InstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).InstrumentationKey]"
            },
            "ConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))).ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}MySQLServerDeploy', variables('devPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "administratorLogin": {
            "value": "[variables('databaseLogin')]"
          },
          "administratorPassword": {
            "value": "[parameters('devDatabasePassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "mySQLServerName": {
            "value": "[variables('devMySQLServerName')]"
          },
          "mySQLServerSku": {
            "value": "[parameters('devMySQLServerSku')]"
          },
          "geoRedundantBackup": {
            "value": "[parameters('devGeoRedundantBackup')]"
          },
          "highAvailabilityMode": {
            "value": "[parameters('devHighAvailabilityMode')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "16053392450951354502"
            }
          },
          "parameters": {
            "mySQLServerName": {
              "type": "string",
              "maxLength": 63,
              "minLength": 3
            },
            "mySQLServerSku": {
              "type": "string",
              "allowedValues": [
                "Standard_B16ms",
                "Standard_D2ds_v4"
              ]
            },
            "administratorLogin": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Database administrator login name"
              }
            },
            "administratorPassword": {
              "type": "secureString",
              "maxLength": 128,
              "minLength": 8,
              "metadata": {
                "description": "Database administrator password"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "geoRedundantBackup": {
              "type": "string",
              "metadata": {
                "description": "Whether or not geo redundant backup is enabled."
              },
              "allowedValues": [
                "Disabled",
                "Enabled"
              ]
            },
            "highAvailabilityMode": {
              "type": "string",
              "metadata": {
                "description": "High availability mode for a server."
              },
              "allowedValues": [
                "Disabled",
                "SameZone",
                "ZoneRedundant"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.DBforMySQL/flexibleServers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('mySQLServerName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('mySQLServerSku')]",
                "tier": "GeneralPurpose"
              },
              "properties": {
                "createMode": "Default",
                "version": "5.7",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "backup": {
                  "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
                },
                "highAvailability": {
                  "mode": "[parameters('highAvailabilityMode')]"
                }
              }
            },
            {
              "type": "Microsoft.DBforMySQL/flexibleServers/firewallRules",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('mySQLServerName'), 'AllowAzureIPs')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DBforMySQL/flexibleServers/{0}', parameters('mySQLServerName'))]",
              "name": "MySQLServerDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "MySqlSlowLogs",
                    "enabled": true
                  },
                  {
                    "category": "MySqlAuditLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('mySQLServerName')]"
            },
            "fullyQualifiedDomainName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))).fullyQualifiedDomainName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'devLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}MySQLServerDeploy', variables('stagePrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "administratorLogin": {
            "value": "[variables('databaseLogin')]"
          },
          "administratorPassword": {
            "value": "[parameters('stageDatabasePassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "mySQLServerName": {
            "value": "[variables('stageMySQLServerName')]"
          },
          "mySQLServerSku": {
            "value": "[parameters('mySQLServerSku')]"
          },
          "geoRedundantBackup": {
            "value": "[parameters('geoRedundantBackup')]"
          },
          "highAvailabilityMode": {
            "value": "[parameters('highAvailabilityMode')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "16053392450951354502"
            }
          },
          "parameters": {
            "mySQLServerName": {
              "type": "string",
              "maxLength": 63,
              "minLength": 3
            },
            "mySQLServerSku": {
              "type": "string",
              "allowedValues": [
                "Standard_B16ms",
                "Standard_D2ds_v4"
              ]
            },
            "administratorLogin": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Database administrator login name"
              }
            },
            "administratorPassword": {
              "type": "secureString",
              "maxLength": 128,
              "minLength": 8,
              "metadata": {
                "description": "Database administrator password"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "geoRedundantBackup": {
              "type": "string",
              "metadata": {
                "description": "Whether or not geo redundant backup is enabled."
              },
              "allowedValues": [
                "Disabled",
                "Enabled"
              ]
            },
            "highAvailabilityMode": {
              "type": "string",
              "metadata": {
                "description": "High availability mode for a server."
              },
              "allowedValues": [
                "Disabled",
                "SameZone",
                "ZoneRedundant"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.DBforMySQL/flexibleServers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('mySQLServerName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('mySQLServerSku')]",
                "tier": "GeneralPurpose"
              },
              "properties": {
                "createMode": "Default",
                "version": "5.7",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "backup": {
                  "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
                },
                "highAvailability": {
                  "mode": "[parameters('highAvailabilityMode')]"
                }
              }
            },
            {
              "type": "Microsoft.DBforMySQL/flexibleServers/firewallRules",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('mySQLServerName'), 'AllowAzureIPs')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DBforMySQL/flexibleServers/{0}', parameters('mySQLServerName'))]",
              "name": "MySQLServerDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "MySqlSlowLogs",
                    "enabled": true
                  },
                  {
                    "category": "MySqlAuditLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('mySQLServerName')]"
            },
            "fullyQualifiedDomainName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))).fullyQualifiedDomainName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}MySQLServerDeploy', variables('prodPrefix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "administratorLogin": {
            "value": "[variables('databaseLogin')]"
          },
          "administratorPassword": {
            "value": "[parameters('prodDatabasePassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "mySQLServerName": {
            "value": "[variables('prodMySQLServerName')]"
          },
          "mySQLServerSku": {
            "value": "[parameters('mySQLServerSku')]"
          },
          "geoRedundantBackup": {
            "value": "[parameters('geoRedundantBackup')]"
          },
          "highAvailabilityMode": {
            "value": "[parameters('highAvailabilityMode')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "16053392450951354502"
            }
          },
          "parameters": {
            "mySQLServerName": {
              "type": "string",
              "maxLength": 63,
              "minLength": 3
            },
            "mySQLServerSku": {
              "type": "string",
              "allowedValues": [
                "Standard_B16ms",
                "Standard_D2ds_v4"
              ]
            },
            "administratorLogin": {
              "type": "string",
              "minLength": 1,
              "metadata": {
                "description": "Database administrator login name"
              }
            },
            "administratorPassword": {
              "type": "secureString",
              "maxLength": 128,
              "minLength": 8,
              "metadata": {
                "description": "Database administrator password"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "geoRedundantBackup": {
              "type": "string",
              "metadata": {
                "description": "Whether or not geo redundant backup is enabled."
              },
              "allowedValues": [
                "Disabled",
                "Enabled"
              ]
            },
            "highAvailabilityMode": {
              "type": "string",
              "metadata": {
                "description": "High availability mode for a server."
              },
              "allowedValues": [
                "Disabled",
                "SameZone",
                "ZoneRedundant"
              ]
            }
          },
          "resources": [
            {
              "type": "Microsoft.DBforMySQL/flexibleServers",
              "apiVersion": "2021-05-01",
              "name": "[parameters('mySQLServerName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('mySQLServerSku')]",
                "tier": "GeneralPurpose"
              },
              "properties": {
                "createMode": "Default",
                "version": "5.7",
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorPassword')]",
                "backup": {
                  "geoRedundantBackup": "[parameters('geoRedundantBackup')]"
                },
                "highAvailability": {
                  "mode": "[parameters('highAvailabilityMode')]"
                }
              }
            },
            {
              "type": "Microsoft.DBforMySQL/flexibleServers/firewallRules",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}/{1}', parameters('mySQLServerName'), 'AllowAzureIPs')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DBforMySQL/flexibleServers/{0}', parameters('mySQLServerName'))]",
              "name": "MySQLServerDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "MySqlSlowLogs",
                    "enabled": true
                  },
                  {
                    "category": "MySqlAuditLogs",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('mySQLServerName')]"
            },
            "fullyQualifiedDomainName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforMySQL/flexibleServers', parameters('mySQLServerName'))).fullyQualifiedDomainName]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]"
      ]
    },
    {
      "condition": "[equals(parameters('stageDeploymentConfiguration'), 'Web app with Azure CDN')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "stageCdnEndPointDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cdnProfileName": {
            "value": "[variables('stageCdnProfileName')]"
          },
          "cdnProfileSku": {
            "value": "[variables('cdnProfileSku')]"
          },
          "cdnEndpointName": {
            "value": "[variables('stageCdnEndpointName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "webAppName": {
            "value": "[format('{0}WebAppDeploy', variables('stagePrefix'))]"
          },
          "webAppHostName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.hostName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10858073323966907456"
            }
          },
          "parameters": {
            "cdnProfileName": {
              "type": "string",
              "maxLength": 260,
              "minLength": 1,
              "metadata": {
                "description": "CDN Profile name"
              }
            },
            "cdnProfileSku": {
              "type": "object",
              "metadata": {
                "description": "CDN Profile SKU"
              }
            },
            "cdnEndpointName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "metadata": {
                "description": "CDN Endpoint name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "Web app to confire endpoint for"
              }
            },
            "webAppHostName": {
              "type": "string",
              "metadata": {
                "description": "Web app hostname to use in the endpoint"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Cdn/profiles",
              "apiVersion": "2020-09-01",
              "name": "[parameters('cdnProfileName')]",
              "location": "[parameters('location')]",
              "sku": "[parameters('cdnProfileSku')]"
            },
            {
              "type": "Microsoft.Cdn/profiles/endpoints",
              "apiVersion": "2020-09-01",
              "name": "[format('{0}/{1}', parameters('cdnProfileName'), parameters('cdnEndpointName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "isHttpAllowed": false,
                "isHttpsAllowed": true,
                "originHostHeader": "[parameters('webAppHostName')]",
                "origins": [
                  {
                    "name": "[parameters('webAppName')]",
                    "properties": {
                      "hostName": "[parameters('webAppHostName')]",
                      "httpPort": 80,
                      "httpsPort": 443
                    }
                  }
                ],
                "isCompressionEnabled": true,
                "contentTypesToCompress": [
                  "application/eot",
                  "application/font",
                  "application/font-sfnt",
                  "application/javascript",
                  "application/json",
                  "application/opentype",
                  "application/otf",
                  "application/pkcs7-mime",
                  "application/truetype",
                  "application/ttf",
                  "application/vnd.ms-fontobject",
                  "application/xhtml+xml",
                  "application/xml",
                  "application/xml+rss",
                  "application/x-font-opentype",
                  "application/x-font-truetype",
                  "application/x-font-ttf",
                  "application/x-httpd-cgi",
                  "application/x-javascript",
                  "application/x-mpegurl",
                  "application/x-opentype",
                  "application/x-otf",
                  "application/x-perl",
                  "application/x-ttf",
                  "font/eot",
                  "font/ttf",
                  "font/otf",
                  "font/opentype",
                  "image/svg+xml",
                  "text/css",
                  "text/csv",
                  "text/html",
                  "text/javascript",
                  "text/js",
                  "text/plain",
                  "text/richtext",
                  "text/tab-separated-values",
                  "text/xml",
                  "text/x-script",
                  "text/x-component",
                  "text/x-java-source"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', parameters('cdnProfileName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cdn/profiles/{0}/endpoints/{1}', parameters('cdnProfileName'), parameters('cdnEndpointName'))]",
              "name": "CDNEndpointDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "CoreAnalytics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/endpoints', parameters('cdnProfileName'), parameters('cdnEndpointName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('cdnProfileName'))]",
              "name": "CDNProfileDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AzureCdnAccessLog",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', parameters('cdnProfileName'))]"
              ]
            }
          ],
          "outputs": {
            "cdnEndpointOrigin": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', parameters('cdnProfileName'), parameters('cdnEndpointName'))).hostName]"
            },
            "cdnEndpointHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', parameters('cdnProfileName'), parameters('cdnEndpointName'))).originHostHeader]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('prodDeploymentConfiguration'), 'Web app with Azure CDN')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "prodCdnEndPointDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cdnProfileName": {
            "value": "[variables('prodCdnProfileName')]"
          },
          "cdnProfileSku": {
            "value": "[variables('cdnProfileSku')]"
          },
          "cdnEndpointName": {
            "value": "[variables('prodCdnEndpointName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "webAppName": {
            "value": "[format('{0}WebAppDeploy', variables('prodPrefix'))]"
          },
          "webAppHostName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.hostName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "10858073323966907456"
            }
          },
          "parameters": {
            "cdnProfileName": {
              "type": "string",
              "maxLength": 260,
              "minLength": 1,
              "metadata": {
                "description": "CDN Profile name"
              }
            },
            "cdnProfileSku": {
              "type": "object",
              "metadata": {
                "description": "CDN Profile SKU"
              }
            },
            "cdnEndpointName": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "metadata": {
                "description": "CDN Endpoint name"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location to deploy the resources"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "Web app to confire endpoint for"
              }
            },
            "webAppHostName": {
              "type": "string",
              "metadata": {
                "description": "Web app hostname to use in the endpoint"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Cdn/profiles",
              "apiVersion": "2020-09-01",
              "name": "[parameters('cdnProfileName')]",
              "location": "[parameters('location')]",
              "sku": "[parameters('cdnProfileSku')]"
            },
            {
              "type": "Microsoft.Cdn/profiles/endpoints",
              "apiVersion": "2020-09-01",
              "name": "[format('{0}/{1}', parameters('cdnProfileName'), parameters('cdnEndpointName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "isHttpAllowed": false,
                "isHttpsAllowed": true,
                "originHostHeader": "[parameters('webAppHostName')]",
                "origins": [
                  {
                    "name": "[parameters('webAppName')]",
                    "properties": {
                      "hostName": "[parameters('webAppHostName')]",
                      "httpPort": 80,
                      "httpsPort": 443
                    }
                  }
                ],
                "isCompressionEnabled": true,
                "contentTypesToCompress": [
                  "application/eot",
                  "application/font",
                  "application/font-sfnt",
                  "application/javascript",
                  "application/json",
                  "application/opentype",
                  "application/otf",
                  "application/pkcs7-mime",
                  "application/truetype",
                  "application/ttf",
                  "application/vnd.ms-fontobject",
                  "application/xhtml+xml",
                  "application/xml",
                  "application/xml+rss",
                  "application/x-font-opentype",
                  "application/x-font-truetype",
                  "application/x-font-ttf",
                  "application/x-httpd-cgi",
                  "application/x-javascript",
                  "application/x-mpegurl",
                  "application/x-opentype",
                  "application/x-otf",
                  "application/x-perl",
                  "application/x-ttf",
                  "font/eot",
                  "font/ttf",
                  "font/otf",
                  "font/opentype",
                  "image/svg+xml",
                  "text/css",
                  "text/csv",
                  "text/html",
                  "text/javascript",
                  "text/js",
                  "text/plain",
                  "text/richtext",
                  "text/tab-separated-values",
                  "text/xml",
                  "text/x-script",
                  "text/x-component",
                  "text/x-java-source"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', parameters('cdnProfileName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cdn/profiles/{0}/endpoints/{1}', parameters('cdnProfileName'), parameters('cdnEndpointName'))]",
              "name": "CDNEndpointDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "logs": [
                  {
                    "category": "CoreAnalytics",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles/endpoints', parameters('cdnProfileName'), parameters('cdnEndpointName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('cdnProfileName'))]",
              "name": "CDNProfileDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "AzureCdnAccessLog",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Cdn/profiles', parameters('cdnProfileName'))]"
              ]
            }
          ],
          "outputs": {
            "cdnEndpointOrigin": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', parameters('cdnProfileName'), parameters('cdnEndpointName'))).hostName]"
            },
            "cdnEndpointHostName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Cdn/profiles/endpoints', parameters('cdnProfileName'), parameters('cdnEndpointName'))).originHostHeader]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('stageDeploymentConfiguration'), 'Web app with Azure Front Door')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "stageFrontDoorDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "frontDoorName": {
            "value": "[variables('stageFrontDoorName')]"
          },
          "wafPolicyName": {
            "value": "[variables('stageWafPolicyName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "webAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "1673585719788840530"
            }
          },
          "parameters": {
            "frontDoorName": {
              "type": "string",
              "maxLength": 64,
              "minLength": 5
            },
            "wafPolicyName": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "Web app to confire Front Door for"
              }
            }
          },
          "variables": {
            "backendPool1Name": "[format('{0}-backendPool1', parameters('frontDoorName'))]",
            "healthProbe1Name": "[format('{0}-healthProbe1', parameters('frontDoorName'))]",
            "frontendEndpoint1Name": "[format('{0}-frontendEndpoint1', parameters('frontDoorName'))]",
            "loadBalancing1Name": "[format('{0}-loadBalancing1', parameters('frontDoorName'))]",
            "routingRule1Name": "[format('{0}-routingRule1', parameters('frontDoorName'))]",
            "frontendEndpoint1hostName": "[format('{0}.azurefd.net', parameters('frontDoorName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/frontDoors",
              "apiVersion": "2020-05-01",
              "name": "[parameters('frontDoorName')]",
              "location": "global",
              "properties": {
                "routingRules": [
                  {
                    "name": "[variables('routingRule1Name')]",
                    "properties": {
                      "frontendEndpoints": [
                        {
                          "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', parameters('frontDoorName'), variables('frontendEndpoint1Name'))]"
                        }
                      ],
                      "acceptedProtocols": [
                        "Http",
                        "Https"
                      ],
                      "patternsToMatch": [
                        "/*"
                      ],
                      "routeConfiguration": {
                        "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                        "forwardingProtocol": "HttpsOnly",
                        "backendPool": {
                          "id": "[resourceId('Microsoft.Network/frontDoors/backendPools', parameters('frontDoorName'), variables('backendPool1Name'))]"
                        },
                        "cacheConfiguration": {
                          "queryParameterStripDirective": "StripNone",
                          "dynamicCompression": "Enabled"
                        }
                      },
                      "enabledState": "Enabled"
                    }
                  }
                ],
                "healthProbeSettings": [
                  {
                    "name": "[variables('healthProbe1Name')]",
                    "properties": {
                      "path": "/",
                      "protocol": "Https",
                      "intervalInSeconds": 120
                    }
                  }
                ],
                "loadBalancingSettings": [
                  {
                    "name": "[variables('loadBalancing1Name')]",
                    "properties": {
                      "sampleSize": 4,
                      "successfulSamplesRequired": 2
                    }
                  }
                ],
                "backendPools": [
                  {
                    "name": "[variables('backendPool1Name')]",
                    "properties": {
                      "backends": [
                        {
                          "address": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2020-09-01').defaultHostName]",
                          "backendHostHeader": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2020-09-01').defaultHostName]",
                          "httpPort": 80,
                          "httpsPort": 443,
                          "weight": 50,
                          "priority": 1,
                          "enabledState": "Enabled"
                        }
                      ],
                      "loadBalancingSettings": {
                        "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', parameters('frontDoorName'), variables('loadBalancing1Name'))]"
                      },
                      "healthProbeSettings": {
                        "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', parameters('frontDoorName'), variables('healthProbe1Name'))]"
                      }
                    }
                  }
                ],
                "frontendEndpoints": [
                  {
                    "name": "[variables('frontendEndpoint1Name')]",
                    "properties": {
                      "hostName": "[variables('frontendEndpoint1hostName')]",
                      "sessionAffinityEnabledState": "Disabled",
                      "webApplicationFirewallPolicyLink": {
                        "id": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]"
                      }
                    }
                  }
                ],
                "enabledState": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/frontDoors/{0}', parameters('frontDoorName'))]",
              "name": "FrontDoorDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "FrontdoorAccessLog",
                    "enabled": true
                  },
                  {
                    "category": "FrontdoorWebApplicationFirewallLog",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/frontDoors', parameters('frontDoorName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
              "apiVersion": "2020-11-01",
              "name": "[parameters('wafPolicyName')]",
              "location": "global",
              "properties": {
                "policySettings": {
                  "mode": "Prevention",
                  "enabledState": "Enabled"
                },
                "managedRules": {
                  "managedRuleSets": [
                    {
                      "ruleSetType": "Microsoft_DefaultRuleSet",
                      "ruleSetVersion": "1.1"
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "frontendEndpointHostName": {
              "type": "string",
              "value": "[variables('frontendEndpoint1hostName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'stageLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))]"
      ]
    },
    {
      "condition": "[equals(parameters('prodDeploymentConfiguration'), 'Web app with Azure Front Door')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "prodFrontDoorDeploy",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "frontDoorName": {
            "value": "[variables('prodFrontDoorName')]"
          },
          "wafPolicyName": {
            "value": "[variables('prodWafPolicyName')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')).outputs.id.value]"
          },
          "webAppName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.9.1.41621",
              "templateHash": "1673585719788840530"
            }
          },
          "parameters": {
            "frontDoorName": {
              "type": "string",
              "maxLength": 64,
              "minLength": 5
            },
            "wafPolicyName": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics workspace id to use for diagnostics settings"
              }
            },
            "webAppName": {
              "type": "string",
              "metadata": {
                "description": "Web app to confire Front Door for"
              }
            }
          },
          "variables": {
            "backendPool1Name": "[format('{0}-backendPool1', parameters('frontDoorName'))]",
            "healthProbe1Name": "[format('{0}-healthProbe1', parameters('frontDoorName'))]",
            "frontendEndpoint1Name": "[format('{0}-frontendEndpoint1', parameters('frontDoorName'))]",
            "loadBalancing1Name": "[format('{0}-loadBalancing1', parameters('frontDoorName'))]",
            "routingRule1Name": "[format('{0}-routingRule1', parameters('frontDoorName'))]",
            "frontendEndpoint1hostName": "[format('{0}.azurefd.net', parameters('frontDoorName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/frontDoors",
              "apiVersion": "2020-05-01",
              "name": "[parameters('frontDoorName')]",
              "location": "global",
              "properties": {
                "routingRules": [
                  {
                    "name": "[variables('routingRule1Name')]",
                    "properties": {
                      "frontendEndpoints": [
                        {
                          "id": "[resourceId('Microsoft.Network/frontDoors/frontendEndpoints', parameters('frontDoorName'), variables('frontendEndpoint1Name'))]"
                        }
                      ],
                      "acceptedProtocols": [
                        "Http",
                        "Https"
                      ],
                      "patternsToMatch": [
                        "/*"
                      ],
                      "routeConfiguration": {
                        "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration",
                        "forwardingProtocol": "HttpsOnly",
                        "backendPool": {
                          "id": "[resourceId('Microsoft.Network/frontDoors/backendPools', parameters('frontDoorName'), variables('backendPool1Name'))]"
                        },
                        "cacheConfiguration": {
                          "queryParameterStripDirective": "StripNone",
                          "dynamicCompression": "Enabled"
                        }
                      },
                      "enabledState": "Enabled"
                    }
                  }
                ],
                "healthProbeSettings": [
                  {
                    "name": "[variables('healthProbe1Name')]",
                    "properties": {
                      "path": "/",
                      "protocol": "Https",
                      "intervalInSeconds": 120
                    }
                  }
                ],
                "loadBalancingSettings": [
                  {
                    "name": "[variables('loadBalancing1Name')]",
                    "properties": {
                      "sampleSize": 4,
                      "successfulSamplesRequired": 2
                    }
                  }
                ],
                "backendPools": [
                  {
                    "name": "[variables('backendPool1Name')]",
                    "properties": {
                      "backends": [
                        {
                          "address": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2020-09-01').defaultHostName]",
                          "backendHostHeader": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2020-09-01').defaultHostName]",
                          "httpPort": 80,
                          "httpsPort": 443,
                          "weight": 50,
                          "priority": 1,
                          "enabledState": "Enabled"
                        }
                      ],
                      "loadBalancingSettings": {
                        "id": "[resourceId('Microsoft.Network/frontDoors/loadBalancingSettings', parameters('frontDoorName'), variables('loadBalancing1Name'))]"
                      },
                      "healthProbeSettings": {
                        "id": "[resourceId('Microsoft.Network/frontDoors/healthProbeSettings', parameters('frontDoorName'), variables('healthProbe1Name'))]"
                      }
                    }
                  }
                ],
                "frontendEndpoints": [
                  {
                    "name": "[variables('frontendEndpoint1Name')]",
                    "properties": {
                      "hostName": "[variables('frontendEndpoint1hostName')]",
                      "sessionAffinityEnabledState": "Disabled",
                      "webApplicationFirewallPolicyLink": {
                        "id": "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]"
                      }
                    }
                  }
                ],
                "enabledState": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/FrontDoorWebApplicationFirewallPolicies', parameters('wafPolicyName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/frontDoors/{0}', parameters('frontDoorName'))]",
              "name": "FrontDoorDiagnostics",
              "properties": {
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]",
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "logs": [
                  {
                    "category": "FrontdoorAccessLog",
                    "enabled": true
                  },
                  {
                    "category": "FrontdoorWebApplicationFirewallLog",
                    "enabled": true
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/frontDoors', parameters('frontDoorName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/FrontDoorWebApplicationFirewallPolicies",
              "apiVersion": "2020-11-01",
              "name": "[parameters('wafPolicyName')]",
              "location": "global",
              "properties": {
                "policySettings": {
                  "mode": "Prevention",
                  "enabledState": "Enabled"
                },
                "managedRules": {
                  "managedRuleSets": [
                    {
                      "ruleSetType": "Microsoft_DefaultRuleSet",
                      "ruleSetVersion": "1.1"
                    }
                  ]
                }
              }
            }
          ],
          "outputs": {
            "frontendEndpointHostName": {
              "type": "string",
              "value": "[variables('frontendEndpoint1hostName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'prodLogAnalyticsWorkspaceDeploy')]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))]"
      ]
    }
  ],
  "outputs": {
    "devWebAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))).outputs.name.value]"
    },
    "stageWebAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.name.value]"
    },
    "prodWebAppName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.name.value]"
    },
    "devWebAppPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))).outputs.principalId.value]"
    },
    "stageWebAppPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.principalId.value]"
    },
    "prodWebAppPrincipalId": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.principalId.value]"
    },
    "devWebAppHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}webAppDeploy', variables('devPrefix')))).outputs.hostName.value]"
    },
    "stageWebAppHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('stagePrefix')))).outputs.hostName.value]"
    },
    "prodWebAppHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}WebAppDeploy', variables('prodPrefix')))).outputs.hostName.value]"
    },
    "stageEndpointHostName": {
      "type": "string",
      "value": "[if(equals(parameters('stageDeploymentConfiguration'), 'Web app with Azure Front Door'), reference(resourceId('Microsoft.Resources/deployments', 'stageFrontDoorDeploy'), '2020-10-01').outputs.frontendEndpointHostName.value, reference(resourceId('Microsoft.Resources/deployments', 'stageCdnEndPointDeploy'), '2020-10-01').outputs.cdnEndpointHostName.value)]"
    }
  }
}